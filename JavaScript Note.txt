JavaScript Introduction 
    - JavaScript is the world's most popular programming language.
    - JavaScript is the programming language of the Web.
    - JavaScript is easy to learn.
    - This tutorial will teach you JavaScript from basic to advanced.
Why Study JavaScript?
    JavaScript is one of the 3 languages all web developers must learn:
        1. HTML to define the content of web pages
        2. CSS to specify the layout of web pages
        3. JavaScript to program the behavior of web pages


Web pages are not the only place where JavaScript is used.
    - Many desktop and server programs use JavaScript.
    - Node.js is the best known.
    - Some databases, like MongoDB and CouchDB, also use JavaScript as their programming language.

JavaScript and Java are completely different languages, both in concept and design.

What can JavaScript Do?
    * Event handlers can be used to handle, and verify, user input, user actions, and browser actions:
        - Things that should be done every time a page loads
        - Things that should be done when the page is closed
        - Action that should be performed when a user clicks a button
        - Content that should be verified when a user inputs data


Many different methods can be used to let JavaScript work with events:
    - HTML event attributes can execute JavaScript code directly
    - HTML event attributes can call JavaScript functions
    - You can assign your own event handler functions to HTML elements
    - You can prevent events from being sent or being handled

JavaScript where To?
    * internal(in HTML) and 
        - In Head Section and 
        - In Body Section
    * external (linked via <script> tag)

JavaScript display positivities
    - javascript can be display data in different ways:
        - Writing into an HTML element, using "innerHTML".
        - Writing into the HTML output using "document.write()".
        - Writing into an alert box, using " window alert()" function for simple messages.
        - Writing into the browser console, using "Console.log()".

where is the position of JavaScript?
    The <script> Tag
    In HTML, JavaScript code must be inserted between <script> and </script> tags.
    <script>
    document.getElementById("demo").innerHTML = "My First JavaScript";
    </script>

JavaScript in <head> or <body>
    You can place any number of scripts in an HTML document.
    Scripts can be placed in the <body>, or in the <head> section of an HTML page, or in both.

    JavaScript in <head>
        In this example, a JavaScript function is placed in the <head> section of an HTML page.
        The function is invoked (called) when a button is clicked.

        JavaScript in <body>
            In this example, a JavaScript function is placed in the <body> section of an HTML page.
            The function is invoked (called) when a button is clicked.


External JavaScript
    Scripts can also be placed in external files:
    External file: myScript.js
    function myFunction() {
    document.getElementById("demo").innerHTML = "Programer by Janbuca.";
        }

External scripts are practical when the same code is used in many different web pages.
JavaScript files have the file extension .js.
To use an external script, put the name of the script file in the src (source) attribute of a <script> tag:
Example
<script src="myScript.js"></script>

You can place an external script reference in <head> or <body> as you like.

The script will behave as if it was located exactly where the <script> tag is located.
External scripts cannot contain <script> tags.

External JavaScript Advantages
    Placing scripts in external files has some advantages:
    It separates HTML and code
    It makes HTML and JavaScript easier to read and maintain

To add several script files to one page - use several script tags:
Example
<script src="myScript1.js"></script>
<script src="myScript2.js"></script>


JavaScript Data Types
    - JavaScript Strings
        A string is a variable which stores a series of characters like "John Doe".
        Strings are written with quotes. You can use single or double quotes:
            Example
            var carName = "Volvo XC60"; // Using double quotes
            var carName = 'Volvo XC60'; // Using single quotes

        You can use quotes inside a string, as long as they don't match the quotes surrounding the string:
            Example
            var answer = "It's alright"; // Single quote inside double quotes
            var answer = "He is called 'Johnny'"; // Single quotes inside double quotes
            var answer = 'He is called "Johnny"'; // Double quotes inside single quotes

        Adding a string with numbers
            var x = 16 + "Volvo";
            Does it make any sense to add "Volvo" to sixteen? Will it produce an error or will it produce a result?
            JavaScript will treat the example above as:
            var x = "16" + "Volvo";
            When adding a number and a string, JavaScript will treat the number as a string.

    - JavaScript Numbers
        JavaScript has only one type of numbers.
        Numbers can be written with, or without decimals:
            Example
            var x1 = 34.00; // Written with decimals
            var x2 = 34; // Written without decimals

        Extra large or extra small numbers can be written with scientific (exponential) notation:
            Example
            var y = 123e5; // 12300000
            var z = 123e-5; // 0.00123

    - JavaScript Booleans
        Booleans can only have two values: true or false.
        var x = true;
        var y = false;
        Booleans are often used in conditional testing.

    - JavaScript Arrays
        JavaScript arrays are written with square brackets.
        Array items are separated by commas.
        The following code declares (creates) an array called cars, containing three items (car names):
            Example
            var cars = ["Saab", "Volvo", "BMW"];
            Array indexes are zero-based, which means the first item is [0], second is [1], and so on.

    - JavaScript Objects
        JavaScript objects are written with curly braces.
        Object properties are written as name:value pairs, separated by commas.
            Example
            var person = {firstName:"John", lastName:"Doe", age:50, eyeColor:"blue"};
            The object (person) in the example above has 4 properties: firstName, lastName, age, and eyeColor.
    - Undefined and Null
        The value of a variable with no value is undefined.
        Variables can be emptied by setting the value to null.
        var cars; // Value is undefined
        var person = null; // Value is null

JavaScript has dynamic types.
    This means that the same variable can be used as different types:
        Example
        var x; // Now x is undefined
        x = 5; // Now x is a Number
        x = "John"; // Now x is a String

The typeof Operator
    You can use the JavaScript typeof operator to find the type of a JavaScript variable.
        Example
        typeof "John" // Returns string
        typeof 3.14 // Returns number
        typeof false // Returns boolean
        typeof [1,2,3,4] // Returns object
        typeof {name:'John', age:34} // Returns object

    In JavaScript, an array is a special type of object. Therefore typeof [1,2,3,4] returns object.

Primitive Data
    A primitive data value is a single simple data value with no additional properties and methods.
    The typeof operator can return one of these primitive types:
        string
        number
        boolean
        undefined

    Complex Data
    The typeof operator can return one of two complex types:
        function
        object

    The typeof operator returns object for objects, arrays, and null.
    The typeof operator does not return object for functions.
        Example
        typeof {name:'John', age:34} // Returns "object"
        typeof [1,2,3,4] // Returns "object" (not "array", see note below)
        typeof null // Returns "object"
        typeof function myFunc(){} // Returns "function"


